"""
  Extract the genotype at each heterozygote locus, having snp quality >=20.
  Consider homozygotes genotypes where the 2nd most frequent allele is < x% of
  the top two alleles.
  Input file is a pileup generated by:
      samtools pileup -s -c -f
 """

import heapq

# ------------------------------[ User's input ]-------------------------------
## Input pileup file
pileup_infile= '/exports/work/vet_roslin_nextgen/dario/samtools/output/20100409_RNAseq_LPS_tophat/20100409_RNAseq_LPS_sscrofa9.56.pileup'
## Output
pileup_outfile= pileup_infile + '.snp'
## Header line (set to None if not wanted)
header= ['dataset_id', 'rname', 'pos', 'rbase', 'consensus', 'consensus_phred', 'snp_phred', 'rms', 'nreads', 'allele_1', 'count_allele_1', 'allele_2', 'count_allele_2']
## Identifier of the dataset as first column
dataset_id= '20100409_RNAseq_LPS_tophat_gff'

# ------------------------------------------------------------------------------
pileup= open(pileup_infile)
pileup_out= open(pileup_outfile, 'w')

## Write out header
if header is not None:
    pileup_out.write('\t'.join(header) + '\n')

def format_allele(pileup_line):
    "Removes from the string of query calls metachars and replaces ' and , with ref base"
    replace_dict= {'.':pileup_line[2], ',':pileup_line[2], '^':'', '$':'', '~':'', '"':'', '!':'', 'A':'A', 'C':'C', 'G':'G', 'N':'N', 'T':'T'}
    qbase= (pileup_line[8]).upper()
    qbase2= []
    for i in qbase:
        qbase2.append(replace_dict[i])
    qbase= ''.join(qbase2)
    return(qbase)
    
def summary_allele(qbase):
    "Counts the number of reads for each allele in genotype. Return the two most expressed"
    base_count= {'A':qbase.count('A'), 'C':qbase.count('C'), 'G':qbase.count('G'), 'T':qbase.count('T'), 'N':qbase.count('N')}
    call= heapq.nlargest(3, base_count.iteritems(), heapq.itemgetter(1))
    return(call)

#counter= 0
for line in pileup:
    line= line.split('\t')
    if int(line[4]) <= -1 or int(line[5]) <= 19:
        " Edit genotype and SNP quality thresholds here "
        continue
    xv= format_allele(line)
    alleles= summary_allele(xv)
    sum_top_alleles= alleles[0][1] + alleles[1][1]
    if 'N' in alleles[0] or 'N' in alleles[1]:
        "Skip SNP if one of the two most represented alleles is N"
        continue
#    if sum_top_alleles / float(line[7]) < 0.95:
#        "Skip SNP if the two most represented alleles do not make up x% of the reads"
#        continue
    if (float(alleles[1][1]) / sum_top_alleles) < 0.01:
        """ Filter out homozygptes
        Call homozygotes the SNPs where the 2nd most represented alleles is <= x% of the two top bases
        """
        continue
#    if int(alleles[2][1])/int(alleles[1][1]) > 0.5:
#        " Filter out genotypes where the 2nd most represented allele is less than twice as represented as the 3rd "
#        continue
    alleles_top2= alleles[0:2]
    alleles_top2.sort()
    outline=[]
    outline.append(dataset_id)
    outline.extend(line[0:8])
    outline.extend([str(x) for x in list(alleles_top2[0])])
    outline.extend([str(x) for x in list(alleles_top2[1])])
    outline= '\t'.join(outline)
    pileup_out.write(outline + '\n')
#    counter += 1
#    if counter >1000:
#        break

pileup.close()
pileup_out.close()