#!/bin/env python

import sys
import subprocess
import argparse
import os
import re

parser = argparse.ArgumentParser(description= """
DESCRIPTION
    Execute a series of steps starting from fastq files untrimmed and in sanger encoding.        

EXAMPLE
    ## See what the pipeline consists of.
    ## It doesn't matter if the input file doesn't exists as --noexec will only
    ## create the script file:
    bismark_pipeline.py -f FASTQ -g GENOME -o OUTDIR --noexec
    cat FASTQ.sh
TODO:

""", formatter_class= argparse.RawTextHelpFormatter)

parser.add_argument('--fastq', '-f',
                   required= True,
                   help='''Fastq file to process can be gzipped.
                   ''')

parser.add_argument('--genome', '-g',
                   required= True,
                   help='''Reference genome directory for bismark. Use full path
                   ''')

parser.add_argument('--outdir', '-o',
                   required= False,
                   default= '.',
                   help='''Output directory. Default current wdir. In this dir a
directory called 'bismark-'<basename of fastq> will be created if it doesn't exists.
This subdir is necessary otherwise bismark_methylation_extractor will fail with
concurrent runs.
                   ''')

parser.add_argument('--sh',
                   action= 'store_true',
                   help='''Execute the commands on the front end.
With this option bsub is not used (which is the default).
                   ''')

parser.add_argument('--scriptname',
                   required= False,
                   default= None,
                   help='''The pipeline is written to this filename. Default is
<fastq>.sh
This file is then passed to bsub or executed on the current shell.
                   ''')

parser.add_argument('--mem',
                   type= int,
                   required= False,
                   default= 2048,
                   help='''Memory requirement for bsub -R "rusage[mem=xxxx]". Default is 2048.
                   ''')

parser.add_argument('--bsubOpt',
                   required= False,
                   default= None,
                   help='''Options to pass to bsub. Ignored if --sh flag is used.
NB: If this opiton is set the defualt (-J -oo --R) are not set. 
                   ''')

parser.add_argument('--CX',
                   action= 'store_true',
                   help='''Pass this option to bismark_methylation_extractor. It will
produce a pileup for each C in the genome
                   ''')

parser.add_argument('--noexec',
                   action= 'store_true',
                   help='''Produce the script files but don't execute them. The line that
is suppressed is printed to stdout.
                   ''')

parser.add_argument('--rm_fastq',
                   action= 'store_true',
                   help='''USE WITH CARE: Removes the input fastq file once the pipeline
is completed. Useful to remove fastqfiles generated by split command.
                   ''')

args= parser.parse_args()

# -----------------------------------------------------------------------------

if args.scriptname is None:
    scriptname= args.fastq + '.sh'
else:
    scriptname= args.scriptname

if args.bsubOpt is None:
    bsubOpt= '-J bismark_pipeline-' + args.fastq + ' -oo ' + args.fastq + '.bsub.log' + ' -R "rusage[mem=%(mem)s]"' %{'mem': args.mem}
else:
    bsubOpt= args.bsubOpt
    
if args.fastq.endswith('.gz'):
    gz= '.gz'
else:
    gz= ''
# -----------------------------------------------------------------------------

## 
cwd= os.getcwd() 
fqInput= os.path.split(args.fastq)[1]
fqDir= os.path.split(args.fastq)[0]
if fqDir == '':
    fqDir= '.'
fqBname= re.sub('\.gz$', '', fqInput )
fqBname= re.sub('\.fastq$|\.fq$', '', fqBname)

## Full path to genome
genome= os.path.abspath(args.genome)

## Suffixes:
trim_suffix= '_trimmed.fq' + gz
bismark_suffix= '_bt2_bismark.sam'
methylation_suffix= '_bt2_bismark.txt'

## Prepare output dir:
outdir= os.path.join(args.outdir, 'bismark-' + fqBname)

if args.CX:
    CX= '--CX'
else:
    CX= ''
# -----------------------[ Compile commands ]----------------------------------
mkdir_cmd= 'mkdir -p %s' %(outdir)

trim_cmd= 'trim_galore -q 20 %(fqDir)s/%(fqInput)s; mv %(fqDir)s/%(fqInput)s_trimming_report.txt %(outdir)s' %{'fqDir': fqDir, 'fqInput': fqInput, 'outdir': outdir}

bismark_cmd= 'bismark --bowtie2 -o %(outdir)s %(genome)s %(fqDir)s/%(fqBname)s%(suffix)s' %{'outdir': outdir, 'genome': genome, 'fqDir': fqDir, 'fqBname': fqBname, 'suffix': trim_suffix}

trim_rm= 'rm %(fqDir)s/%(fqBname)s%(suffix)s' %{'fqDir': fqDir, 'fqBname': fqBname, 'suffix': trim_suffix}

methyl_cmd= 'cd %(outdir)s; bismark_methylation_extractor -o . --single-end --comprehensive --merge_non_CpG --report --cytosine_report %(CX)s --genome_folder %(genome)s ./%(fqBname)s%(suffix)s; cd %(cwd)s' \
            %{'outdir': outdir, 'genome': genome, 'fqBname': fqBname, 'suffix': trim_suffix + bismark_suffix, 'cwd': cwd, 'CX': CX}

methyl_bg_rm= 'rm %(outdir)s/%(fqBname)s%(suffix)s.bedGraph' %{'outdir': outdir, 'fqBname': fqBname, 'suffix': trim_suffix + re.sub('\.sam', '', bismark_suffix)}
methyl_noncpg_rm= 'rm %(outdir)s/Non_CpG_context_%(fqBname)s%(trim_suffix)s%(methylation_suffix)s' %{'outdir': outdir, 'fqBname': fqBname, 'trim_suffix':trim_suffix, 'methylation_suffix':methylation_suffix}
methyl_cpg_rm= 'rm %(outdir)s/CpG_context_%(fqBname)s%(trim_suffix)s%(methylation_suffix)s' %{'outdir': outdir, 'fqBname': fqBname, 'trim_suffix':trim_suffix, 'methylation_suffix':methylation_suffix}

sam2bam_cmd= '''samtools view -S -b %(outdir)s/%(fqBname)s%(suffix)s > %(outdir)s/%(fqBname)s.unsorted.bam &&
rm %(outdir)s/%(fqBname)s%(suffix)s &&
samtools sort %(outdir)s/%(fqBname)s.unsorted.bam %(outdir)s/%(fqBname)s &&
rm %(outdir)s/%(fqBname)s.unsorted.bam &&
samtools index %(outdir)s/%(fqBname)s.bam''' %{'outdir': outdir, 'fqBname': fqBname, 'suffix': trim_suffix + bismark_suffix}

if args.rm_fastq:
    rm_fastq_cmd= 'rm %s' %(args.fastq)
else:
    rm_fastq_cmd= 'echo'

# ------------------------------------------------------------------------------   
script= '\n\n'.join(['#!/bin/sh', 'set -e', 'echo "cd %s"' %(cwd),
                     mkdir_cmd,
                     trim_cmd,
                     bismark_cmd,
                     trim_rm,
                     methyl_cmd,
                     methyl_bg_rm,
                     methyl_noncpg_rm,
                     methyl_cpg_rm,
                     sam2bam_cmd,
                     rm_fastq_cmd,
                     'exit'])

fout= open(scriptname, 'w')
fout.write(script)
fout.close()

if args.sh:
   cmd= 'sh ' + scriptname
else:
    cmd= 'bsub ' + bsubOpt + ' < ' + scriptname

if args.noexec:
    print(cmd)
else:
    p= subprocess.Popen(cmd, shell= True)
    p.wait()
    p= subprocess.Popen('mv %s %s' %(scriptname, outdir), shell= True)
    p.wait()
sys.exit()
